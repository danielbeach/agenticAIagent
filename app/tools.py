from typing import List
from langchain_community.utilities import SQLDatabase
from langchain_community.tools.sql_database.tool import QuerySQLDatabaseTool
from langchain.tools import Tool
from sqlalchemy import create_engine
from duckduckgo_search import DDGS
import requests, bs4

# Postgres Tool (read-only queries generated by LLM)
def build_sql_tool(db_url: str):
    db = SQLDatabase.from_uri(db_url)
    tool = QuerySQLDatabaseTool(db=db)
    tool.description = (
        "Use for questions needing structured aggregates from the Postgres 'transactions' table. "
        "Keep queries simple and LIMIT results to <= 20 rows."
    )
    return tool

# Web Search Tool (DuckDuckGo)
def ddg_search(query: str) -> str:
    with DDGS() as ddgs:
        results = ddgs.text(query, max_results=5)
    return "\n".join(f"{r['title']}: {r['href']}" for r in results)

# Basic URL fetch (optional second stage after listing URLs)
def fetch_url(url: str) -> str:
    r = requests.get(url, timeout=8, headers={"User-Agent": "LangGraphExample/1.0"})
    soup = bs4.BeautifulSoup(r.text, 'html.parser')
    text = ' '.join(soup.get_text(' ').split()[:300])
    return text

search_tool = Tool(
    name="web_search",
    description="General web search for recent/external info (returns top results).",
    func=ddg_search,
)
fetch_tool = Tool(
    name="fetch_page",
    description="Fetch and summarize the content of a single URL (input: full URL).",
    func=fetch_url,
)